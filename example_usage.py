#!/usr/bin/env python3
"""
ICT Trading Bot - Example Usage Script

This script demonstrates different ways to use the ICT bot
and shows how to filter signals by different criteria.
"""

import pandas as pd
from datetime import datetime
from ict_bot import (
    load_data, 
    generate_signals,
    get_session,
    DEBUG_MODE
)

def print_header(title):
    """–î—Ä—É–∫—É—î –∫—Ä–∞—Å–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print("\n" + "=" * 80)
    print(f"  {title}")
    print("=" * 80)

def filter_signals_by_pattern(signals, pattern_name):
    """–§—ñ–ª—å—Ç—Ä—É—î —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Ç–∏–ø–æ–º –ø–∞—Ç–µ—Ä–Ω—É."""
    return [s for s in signals if s['pattern'] == pattern_name]

def filter_signals_by_session(signals, session_name):
    """–§—ñ–ª—å—Ç—Ä—É—î —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Å–µ—Å—ñ—î—é."""
    return [s for s in signals if s['session'].lower() == session_name.lower()]

def filter_signals_by_confidence(signals, min_confidence):
    """–§—ñ–ª—å—Ç—Ä—É—î —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Ä—ñ–≤–Ω–µ–º –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ."""
    confidence_levels = {
        'VERY HIGH': 3,
        'HIGH': 2,
        'MEDIUM-HIGH': 1
    }
    min_level = confidence_levels.get(min_confidence, 0)
    return [s for s in signals if confidence_levels.get(s['confidence'], 0) >= min_level]

def filter_signals_by_timeframe(signals, timeframe):
    """–§—ñ–ª—å—Ç—Ä—É—î —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º sweep."""
    return [s for s in signals if timeframe in s['timeframes']]

def print_signal_summary(signals):
    """–í–∏–≤–æ–¥–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –ø–æ —Å–∏–≥–Ω–∞–ª–∞—Ö."""
    if not signals:
        print("‚ö† –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    print(f"\nüìä –í—Å—å–æ–≥–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {len(signals)}")
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ –ø–∞—Ç–µ—Ä–Ω–∞—Ö
    pattern_counts = {}
    for sig in signals:
        pattern = sig['pattern']
        pattern_counts[pattern] = pattern_counts.get(pattern, 0) + 1
    
    print("\nüìã –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –ø–∞—Ç–µ—Ä–Ω–∞—Ö:")
    for pattern, count in sorted(pattern_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"  ‚Ä¢ {pattern}: {count} —Å–∏–≥–Ω–∞–ª—ñ–≤")
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ —Å–µ—Å—ñ—è—Ö
    session_counts = {}
    for sig in signals:
        session = sig['session']
        session_counts[session] = session_counts.get(session, 0) + 1
    
    print("\nüïê –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å–µ—Å—ñ—è—Ö:")
    for session, count in sorted(session_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"  ‚Ä¢ {session}: {count} —Å–∏–≥–Ω–∞–ª—ñ–≤")
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ BUY vs SELL
    buy_count = sum(1 for s in signals if s['type'] == 'BUY')
    sell_count = sum(1 for s in signals if s['type'] == 'SELL')
    
    print("\nüìà –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø—É:")
    print(f"  ‚Ä¢ BUY: {buy_count} —Å–∏–≥–Ω–∞–ª—ñ–≤")
    print(f"  ‚Ä¢ SELL: {sell_count} —Å–∏–≥–Ω–∞–ª—ñ–≤")

def print_signal(sig, index):
    """–í–∏–≤–æ–¥–∏—Ç—å –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª —É –∫—Ä–∞—Å–∏–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ."""
    print(f"\n--- –°–ò–ì–ù–ê–õ #{index} ---")
    print(f"üïê –î–∞—Ç–∞/–ß–∞—Å:     {sig['datetime']}")
    print(f"üìç –°–µ—Å—ñ—è:        {sig['session'].upper()}")
    print(f"üéØ –ü–∞—Ç–µ—Ä–Ω:       {sig['pattern']}")
    print(f"{'üìà' if sig['type'] == 'BUY' else 'üìâ'} –¢–∏–ø —Å–∏–≥–Ω–∞–ª—É:  {sig['type']}")
    print(f"‚úÖ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å:  {sig['confidence']}")
    print(f"üí° –ü—Ä–∏—á–∏–Ω–∞:      {sig['reason']}")
    print(f"üìä –¢—Ä–µ–Ω–¥ H4:     {sig['trend_h4']}")
    print(f"üìä –¢—Ä–µ–Ω–¥ D1:     {sig['trend_d1']}")
    print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º–∏:   {sig['timeframes']}")

def example_1_all_signals():
    """–ü—Ä–∏–∫–ª–∞–¥ 1: –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤."""
    print_header("–ü–†–ò–ö–õ–ê–î 1: –í—Å—ñ —Å–∏–≥–Ω–∞–ª–∏")
    
    print("\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    m15, h4, d1, w1, m1 = load_data()
    
    print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤...")
    signals = generate_signals(m15, h4, d1, w1, m1)
    
    print_signal_summary(signals)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 —Å–∏–≥–Ω–∞–ª—ñ–≤
    print("\n" + "-" * 80)
    print("–ü–µ—Ä—à—ñ 5 —Å–∏–≥–Ω–∞–ª—ñ–≤:")
    print("-" * 80)
    for i, sig in enumerate(signals[:5], 1):
        print_signal(sig, i)

def example_2_double_sweep_only():
    """–ü—Ä–∏–∫–ª–∞–¥ 2: –¢—ñ–ª—å–∫–∏ Double Sweep —Å–∏–≥–Ω–∞–ª–∏."""
    print_header("–ü–†–ò–ö–õ–ê–î 2: –¢—ñ–ª—å–∫–∏ Double Sweep —Å–∏–≥–Ω–∞–ª–∏")
    
    m15, h4, d1, w1, m1 = load_data()
    signals = generate_signals(m15, h4, d1, w1, m1)
    
    double_sweep_signals = filter_signals_by_pattern(signals, "Double Sweep")
    
    print(f"\n‚ú® –ó–Ω–∞–π–¥–µ–Ω–æ {len(double_sweep_signals)} Double Sweep —Å–∏–≥–Ω–∞–ª—ñ–≤")
    print_signal_summary(double_sweep_signals)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 —Å–∏–≥–Ω–∞–ª–∏
    print("\n" + "-" * 80)
    print("–ü–µ—Ä—à—ñ 3 Double Sweep —Å–∏–≥–Ω–∞–ª–∏:")
    print("-" * 80)
    for i, sig in enumerate(double_sweep_signals[:3], 1):
        print_signal(sig, i)

def example_3_london_session():
    """–ü—Ä–∏–∫–ª–∞–¥ 3: –°–∏–≥–Ω–∞–ª–∏ —Ç—ñ–ª—å–∫–∏ –∑ London —Å–µ—Å—ñ—ó."""
    print_header("–ü–†–ò–ö–õ–ê–î 3: –°–∏–≥–Ω–∞–ª–∏ London —Å–µ—Å—ñ—ó")
    
    m15, h4, d1, w1, m1 = load_data()
    signals = generate_signals(m15, h4, d1, w1, m1)
    
    london_signals = filter_signals_by_session(signals, "london")
    
    print(f"\nüá¨üáß –ó–Ω–∞–π–¥–µ–Ω–æ {len(london_signals)} —Å–∏–≥–Ω–∞–ª—ñ–≤ —É London —Å–µ—Å—ñ—ó")
    print_signal_summary(london_signals)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ London —Å–∏–≥–Ω–∞–ª–∏ (—è–∫—â–æ —ó—Ö –Ω–µ –±–∞–≥–∞—Ç–æ)
    if len(london_signals) <= 5:
        print("\n" + "-" * 80)
        print("–í—Å—ñ London —Å–∏–≥–Ω–∞–ª–∏:")
        print("-" * 80)
        for i, sig in enumerate(london_signals, 1):
            print_signal(sig, i)
    else:
        print("\n" + "-" * 80)
        print("–ü–µ—Ä—à—ñ 5 London —Å–∏–≥–Ω–∞–ª—ñ–≤:")
        print("-" * 80)
        for i, sig in enumerate(london_signals[:5], 1):
            print_signal(sig, i)

def example_4_high_confidence():
    """–ü—Ä–∏–∫–ª–∞–¥ 4: –¢—ñ–ª—å–∫–∏ –≤–∏—Å–æ–∫–æ –≤–ø–µ–≤–Ω–µ–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏."""
    print_header("–ü–†–ò–ö–õ–ê–î 4: –í–∏—Å–æ–∫–æ –≤–ø–µ–≤–Ω–µ–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ (VERY HIGH)")
    
    m15, h4, d1, w1, m1 = load_data()
    signals = generate_signals(m15, h4, d1, w1, m1)
    
    high_conf_signals = filter_signals_by_confidence(signals, "VERY HIGH")
    
    print(f"\n‚≠ê –ó–Ω–∞–π–¥–µ–Ω–æ {len(high_conf_signals)} —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ VERY HIGH –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é")
    print_signal_summary(high_conf_signals)

def example_5_buy_signals_only():
    """–ü—Ä–∏–∫–ª–∞–¥ 5: –¢—ñ–ª—å–∫–∏ BUY —Å–∏–≥–Ω–∞–ª–∏."""
    print_header("–ü–†–ò–ö–õ–ê–î 5: –¢—ñ–ª—å–∫–∏ BUY —Å–∏–≥–Ω–∞–ª–∏")
    
    m15, h4, d1, w1, m1 = load_data()
    signals = generate_signals(m15, h4, d1, w1, m1)
    
    buy_signals = [s for s in signals if s['type'] == 'BUY']
    
    print(f"\nüìà –ó–Ω–∞–π–¥–µ–Ω–æ {len(buy_signals)} BUY —Å–∏–≥–Ω–∞–ª—ñ–≤")
    print_signal_summary(buy_signals)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 BUY —Å–∏–≥–Ω–∞–ª–∏
    print("\n" + "-" * 80)
    print("–ü–µ—Ä—à—ñ 3 BUY —Å–∏–≥–Ω–∞–ª–∏:")
    print("-" * 80)
    for i, sig in enumerate(buy_signals[:3], 1):
        print_signal(sig, i)

def example_6_pattern_comparison():
    """–ü—Ä–∏–∫–ª–∞–¥ 6: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–∞—Ç–µ—Ä–Ω—ñ–≤."""
    print_header("–ü–†–ò–ö–õ–ê–î 6: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—ñ–≤")
    
    m15, h4, d1, w1, m1 = load_data()
    signals = generate_signals(m15, h4, d1, w1, m1)
    
    print("\nüìä –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç–µ—Ä–Ω—ñ–≤:")
    print("-" * 80)
    
    pattern_names = [
        "Sweep + FVG + CISD",
        "Double Sweep",
        "Session Open Liquidity Grab",
        "BOS after Sweep",
        "Asia/Frankfurt Context"
    ]
    
    for pattern in pattern_names:
        pattern_signals = filter_signals_by_pattern(signals, pattern)
        buy_count = sum(1 for s in pattern_signals if s['type'] == 'BUY')
        sell_count = sum(1 for s in pattern_signals if s['type'] == 'SELL')
        
        print(f"\nüéØ {pattern}")
        print(f"   –í—Å—å–æ–≥–æ: {len(pattern_signals)} —Å–∏–≥–Ω–∞–ª—ñ–≤")
        if len(pattern_signals) > 0:
            buy_pct = (buy_count / len(pattern_signals)) * 100
            sell_pct = (sell_count / len(pattern_signals)) * 100
            print(f"   BUY:  {buy_count} ({buy_pct:.1f}%)")
            print(f"   SELL: {sell_count} ({sell_pct:.1f}%)")

def example_7_custom_filter():
    """–ü—Ä–∏–∫–ª–∞–¥ 7: –í–ª–∞—Å–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä (London + BUY + VERY HIGH)."""
    print_header("–ü–†–ò–ö–õ–ê–î 7: –í–ª–∞—Å–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä (London + BUY + VERY HIGH)")
    
    m15, h4, d1, w1, m1 = load_data()
    signals = generate_signals(m15, h4, d1, w1, m1)
    
    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    filtered = signals
    filtered = filter_signals_by_session(filtered, "london")
    filtered = [s for s in filtered if s['type'] == 'BUY']
    filtered = filter_signals_by_confidence(filtered, "VERY HIGH")
    
    print(f"\nüéØ –ó–Ω–∞–π–¥–µ–Ω–æ {len(filtered)} —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º:")
    print("   ‚Ä¢ –°–µ—Å—ñ—è: London")
    print("   ‚Ä¢ –¢–∏–ø: BUY")
    print("   ‚Ä¢ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: VERY HIGH")
    
    if len(filtered) > 0:
        print_signal_summary(filtered)
        print("\n" + "-" * 80)
        print("–í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏:")
        print("-" * 80)
        for i, sig in enumerate(filtered[:5], 1):
            print_signal(sig, i)
    else:
        print("\n‚ö† –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑ —Ç–∞–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏.")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø—Ä–∏–∫–ª–∞–¥—ñ–≤."""
    print("=" * 80)
    print(" " * 20 + "ICT TRADING BOT - EXAMPLES")
    print("=" * 80)
    
    examples = [
        ("–í—Å—ñ —Å–∏–≥–Ω–∞–ª–∏", example_1_all_signals),
        ("Double Sweep —Ç—ñ–ª—å–∫–∏", example_2_double_sweep_only),
        ("London —Å–µ—Å—ñ—è", example_3_london_session),
        ("–í–∏—Å–æ–∫–æ –≤–ø–µ–≤–Ω–µ–Ω—ñ", example_4_high_confidence),
        ("BUY —Å–∏–≥–Ω–∞–ª–∏", example_5_buy_signals_only),
        ("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—ñ–≤", example_6_pattern_comparison),
        ("–í–ª–∞—Å–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä", example_7_custom_filter),
    ]
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏:")
    for i, (name, _) in enumerate(examples, 1):
        print(f"  {i}. {name}")
    print("  0. –í—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏")
    print("  q. –í–∏—Ö—ñ–¥")
    
    max_example_num = len(examples)
    
    while True:
        choice = input(f"\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ (0-{max_example_num}, q –¥–ª—è –≤–∏—Ö–æ–¥—É): ").strip().lower()
        
        if choice == 'q':
            print("\n–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã")
            break
        
        if choice == '0':
            # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏
            for name, func in examples:
                func()
        elif choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(examples):
                examples[idx][1]()
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –ø—Ä–∏–∫–ª–∞–¥—É!")
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")

if __name__ == "__main__":
    main()
